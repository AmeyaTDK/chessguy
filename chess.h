#ifndef CHESS_H
#define CHESS_H

// DO NOT EDIT THIS FILE

#define COLOR_WHITE 1
#define COLOR_BLACK -1

#define MAX_MOVE_LEN 7

enum piece_type {
    K,Q,R,B,N,P
};

struct piece {
    int color;
    struct square *sqr;
    enum piece_type type;
};

struct square {
    bool present;
    struct piece *p;
	int x;
	int y;
};

struct chessboard {
	struct square[8][8];
	int turn;
	// state variables
};

enum outcome {
	COMPLETE,
	ILLIGAL,
	CHECKMATE,
	DRAW
};


/*
 * Finds possible paths to position denoted by x,y for a piece of type and color.
 *
 * returns number of paths found.
 *
 * cb : chessboard
 * x: destination x
 * y: destination y
 * type: piece type
 * color: color
 * [out] paths: list of possible paths
 *
 */
int find_paths(chessboard* cb, int x, int y, piece_type type, int color, struct square*** paths);

/*
 * This func initiates the chessboard to standard starting position.
 */
chessboard* chessboard_init();

/*
 * This func initiates the chessboard to position given by position string.
 * The string is null terminated and formatted in FEN format (https://www.chess.com/terms/fen-chess)
 * ex. [FEN "8/8/5k2/8/8/8/1K6/8 w - - 0 1"]
 */
chessboard* chessboard_init_fen(const char* position);

/*
 * Destroy chessboard. 
 * Cleanup all memory.
 */
void chessboard_destroy(chessboard *cb);

/*
 * Make given move on chessboard. return the outcome after the move.
 * The move is given in the standard chess format.
 * + or * may not be present in the move even if its check/checkmate.
 */
outcome make_move(chessboard *cb, const char move_string[MAX_MOVE_LEN]);

/*
 * Print the chessboard to stdout.
 */
void print_chessboard(chessboard *cb);

#endif
